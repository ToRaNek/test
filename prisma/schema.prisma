// Prisma Schema for Devine la Zik - PostgreSQL

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String?         @unique
  emailVerified  DateTime?
  image          String?
  pseudo         String?         @unique
  accounts       Account[]
  sessions       Session[]
  players        Player[]
  musicPrefs     MusicPreference?
  createdAt      DateTime        @default(now())
  updatedAt      DateTime        @updatedAt
  // Soft-delete and GDPR compliance
  deletedAt      DateTime?

  @@map("users")
}

model Account {
  id                String   @id @default(cuid())
  userId            String   @map("user_id")
  type              String
  provider          String   // google, discord, spotify
  providerAccountId String   @map("provider_account_id")
  refresh_token     String?  @db.Text
  access_token      String?  @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?  @db.Text
  session_state     String?
  createdAt         DateTime @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model Room {
  id         String    @id @default(cuid())
  code       String    @unique
  hostId     String
  status     String    // open, playing, ended
  createdAt  DateTime  @default(now())

  players    Player[]
  game       Game?

  @@map("rooms")
}

model Player {
  id        String   @id @default(cuid())
  userId    String
  roomId    String
  score     Int      @default(0)
  ready     Boolean  @default(false)
  ranking   Int?
  joinedAt  DateTime @default(now())

  user      User     @relation(fields: [userId], references: [id])
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@unique([userId, roomId])
  @@map("players")
}

model MusicPreference {
  id                  String   @id @default(cuid())
  userId              String   @unique
  selectedPlaylistIds String   // CSV or JSON stringified array of playlist ids
  useLikedTracks      Boolean  @default(true)
  useHistory          Boolean  @default(false)

  user                User     @relation(fields: [userId], references: [id])

  @@map("music_preferences")
}

model Game {
  id                   String   @id @default(cuid())
  roomId               String   @unique
  questions            Json
  state                String   // waiting, running, finished
  scores               Json
  currentQuestionIndex Int      @default(0)
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt

  room                 Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)

  @@map("games")
}