// prettier-fixer.js
// Ce script corrige automatiquement les erreurs Prettier dans le projet
// Pour ex√©cuter: node prettier-fixer.js

const fs = require('fs');
const path = require('path');
const { execSync } = require('child_process');

// Configuration
const PROJECT_ROOT = '.'; // Chemin vers la racine du projet

// Fonction pour ex√©cuter Prettier sur tous les fichiers
function fixAllFiles() {
  try {
    console.log('üîç D√©tection des fichiers √† corriger...');

    // Ex√©cute Prettier en mode √©criture sur tous les fichiers
    const command = 'npx prettier --write "app/**/*.{ts,tsx,js,jsx}" "prisma/**/*.{ts,js}"';
    console.log(`Ex√©cution de: ${command}`);

    const output = execSync(command, { cwd: PROJECT_ROOT, encoding: 'utf8' });
    console.log('‚úÖ Correction termin√©e!');
    console.log(output);

    // V√©rifier si la correction a r√©solu tous les probl√®mes
    try {
      console.log('üß™ V√©rification de la correction...');
      const _checkOutput = execSync(
        'npx prettier --check "app/**/*.{ts,tsx,js,jsx}" "prisma/**/*.{ts,js}"',
        { cwd: PROJECT_ROOT, encoding: 'utf8' },
      );
      console.log('‚úÖ Toutes les erreurs Prettier ont √©t√© corrig√©es!');
    } catch (checkError) {
      console.log('‚ö†Ô∏è Certaines erreurs persistent. Correction manuelle additionnelle requise.');
      console.log('Erreurs restantes:');
      console.log(checkError.stdout);
    }
  } catch (error) {
    console.error('‚ùå Erreur lors de la correction:', error.message);
    if (error.stdout) console.error(error.stdout);
    if (error.stderr) console.error(error.stderr);
  }
}

// Fonction pour corriger manuellement les probl√®mes sp√©cifiques
function fixSpecificIssues() {
  console.log('üîß Correction manuelle de probl√®mes sp√©cifiques...');

  // Liste des corrections sp√©cifiques √† appliquer
  const fixes = [
    {
      file: 'app/api/auth/[...nextauth].ts',
      replacements: [
        {
          from: "account?.provider !== 'google' &&\n          account?.provider !== 'discord'",
          to: "account?.provider !== 'google' && account?.provider !== 'discord'",
        },
      ],
    },
    // Ajoutez ici d'autres corrections sp√©cifiques pour les fichiers concern√©s
  ];

  // Applique chaque correction
  for (const fix of fixes) {
    try {
      const filePath = path.join(PROJECT_ROOT, fix.file);

      if (!fs.existsSync(filePath)) {
        console.log(`‚ö†Ô∏è Fichier non trouv√©: ${fix.file}`);
        continue;
      }

      let content = fs.readFileSync(filePath, 'utf8');

      for (const replacement of fix.replacements) {
        content = content.replace(replacement.from, replacement.to);
      }

      fs.writeFileSync(filePath, content, 'utf8');
      console.log(`‚úÖ Corrections appliqu√©es √† ${fix.file}`);
    } catch (error) {
      console.error(`‚ùå Erreur lors de la correction de ${fix.file}:`, error.message);
    }
  }
}

// Fonction principale
function main() {
  console.log('üõ†Ô∏è D√©marrage de la correction des erreurs Prettier...');

  // √âtape 1: Corriger les probl√®mes sp√©cifiques qui ne seraient pas pris en charge par Prettier
  fixSpecificIssues();

  // √âtape 2: Lancer Prettier sur tous les fichiers
  fixAllFiles();

  console.log('üéâ Processus de correction termin√©!');
}

// Ex√©cuter le script
main();
